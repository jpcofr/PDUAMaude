*** Test for and functions


** andreg: And applied over registers

first parameter	base10	second parameter	base10	expected
1000			8		1000				8		1000
0101			5		1010				10		0000
1100			12		0111       			7		0100
0101			5		0101				5		0101

* Generated test strings

reduce in REGISTER : andreg(reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andreg(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andreg(reg(insert(3, 1, insert(2, 1, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 1, insert(0, 1, empty))))), 3) .
reduce in REGISTER : andreg(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), 3) .

** andpar: Activates the parity flag whenever an and operation is made

first parameter	base10	second parameter	base10	expected
1000			8		1000				8		0
0101			5		1010				10		1
1100			12		0111       			7		0
0101			5		0101				5		1

* Generated test strings

reduce in REGISTER : andpar(reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andpar(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andpar(reg(insert(3, 1, insert(2, 1, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 1, insert(0, 1, empty))))), 3) .
reduce in REGISTER : andpar(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), 3) .

** andzero: Activates the zero flag whenever an and operation is made

first parameter	base10	second parameter	base10	expected
1000			8		0110				6		1
0101			5		1010				10		1
1100			12		0111       			7		0
0101			5		0101				5		0

* Generated test strings

reduce in REGISTER : andzero(reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andzero(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andzero(reg(insert(3, 1, insert(2, 1, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 1, insert(0, 1, empty))))), 3) .
reduce in REGISTER : andzero(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), 3) .

** andneg: Activates the negative flag whenever an and operation is made

first parameter	base10	second parameter	base10	expected
1000			8		0110				6		0
1101			13		1010				10		1
1100			12		1111       			15		1
0101			5		0101				5		0

* Generated test strings

reduce in REGISTER : andneg(reg(insert(3, 1, insert(2, 0, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andneg(reg(insert(3, 1, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 1, insert(2, 0, insert(1, 1, insert(0, 0, empty))))), 3) .
reduce in REGISTER : andneg(reg(insert(3, 1, insert(2, 1, insert(1, 0, insert(0, 0, empty))))), reg(insert(3, 1, insert(2, 1, insert(1, 1, insert(0, 1, empty))))), 3) .
reduce in REGISTER : andneg(reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), reg(insert(3, 0, insert(2, 1, insert(1, 0, insert(0, 1, empty))))), 3) .



