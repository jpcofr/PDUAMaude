*** Register functional module

fmod REGISTER is
	
	protecting STRING .
	protecting BIT .
	protecting MAP{Nat,BIT} .
	protecting NAT .
	
	sort Register .
	subsort Map{Nat, BIT} < Register .
	
	*** Initial constructor
	
	op reg : Map{Nat, BIT} -> Register .
	
	*** Declarations
	
	vars A B : Register .
    var K : Map{Nat, BIT} .
    var Q tam :	Nat .
    var C : Bit .
 
 	
 	*** act 
 	*** State of a bit in the register
		*** Signature
 		
 		 op act : Register Nat -> Bit .
		
		*** Equations
 		
 		 eq act(reg(K), Q)= K[Q] .
	
	*** mreg
	*** Projects the map of a register
		*** Signature
		
		op mreg : Register -> Map{Nat, BIT} .
		
		*** Equations
		
 		eq mreg(reg(K)) = K . 


 	*** AND OPERATION **********************************************************
 	
 	*** andreg 
 	*** and between registers 
		*** Signature
  		
  		op andreg : Register Register Nat  -> Register .
		
		*** Equations
		
		eq andreg(A, B, 0) = reg(insert(0, 
										act(A,0) and act(B,0), 
										empty)) .
		
		eq andreg(A, B, s(Q))= reg(insert(s(Q), 
										  act(A, s(Q)) and act(B, s(Q)), 
									      mreg(andreg(A,B,Q)))) .

	*** andpar 
	*** Flag modification in an and operation
		*** Signature
		
	   	op andpar : Register Register Nat -> Bit .
		
		*** Equations
		
		eq andpar(A, B, 0) = act(A,0) and act(B,0) .
		
		eq andpar(A,B,s(Q)) = andpar(A,B,Q) xor 
		                      not(act(A,s(Q)) and 
							  act(B,s(Q))) .

	*** andzero 
	*** Flag modification in an and operation
		*** Signature
		
		op andzero : Register Register Nat -> Bit .
		
		*** Equations
		
		eq andzero(A,B,0) = not(act(A,0) and act(B,0)) .
		
		eq andzero(A,B,s(Q)) = andzero(A,B,Q) and 
							   not(act(A,s(Q)) and 
		                       act(B,s(Q))) .
		
	*** andneg 
	*** Flag modification in an and operation
		*** Signature
		
		op andneg : Register Register Nat -> Bit . 
		
		*** Equations
		
		eq andneg(A,B,Q) = act(andreg(A,B,Q),Q) .
	      
	*** OR OPERATION ***********************************************************
	
	*** orreg 
 	*** or between registers 
		*** Signature
  		
  		op orreg : Register Register Nat  -> Register .
		
		*** Equations
		
		eq orreg(A, B, 0) = reg(insert(0, 
									   act(A,0) or act(B,0), 
		                               empty)) .
		
		eq orreg(A, B, s(Q)) = reg(insert(s(Q), 
										  act(A,s(Q)) or act(B,s(Q)), 
								          mreg(orreg(A,B,Q)))) .

	*** orzero 
	*** Flag modification in a or operation
		*** Signature
		
		op orzero : Register Register Nat -> Bit .
		
		*** Equations
		
		eq orzero(A,B,0) = not(act(A,0) or 
						   act(B,0)) .
		eq orzero(A,B,s(Q)) = orzero(A,B,Q) and 
							  not(act(A,s(Q)) or 
							  act(B,s(Q))) .
		
	
	*** orpar 
	*** Flag modification in a or operation
		*** Signature
		
	   	op orpar : Register Register Nat -> Bit .
	   	
		*** Equations
		
		eq orpar(A, B, 0) = act(A,0) or act(B,0) .
		
		eq orpar(A,B,s(Q)) = orpar(A,B,Q) xor 
							 not(act(A,s(Q)) or 
							     act(B,s(Q))) .	
	
	*** orneg 
	*** Flag modification in a or operation
		*** Signature
		
		op orneg : Register Register Nat -> Bit .
		 
		*** Equations
		
		eq orneg(A,B,Q) = act(orreg(A,B,Q),Q) .

	*** NOT OPERATION **********************************************************
	
	*** notreg
	*** neges every bit in a register.
		*** Signature
		
		op notreg : Register Nat -> Register .
		
		*** Equations
		
		eq notreg(B, 0) = reg(insert(0, not(act(B,0)),
		    				  empty)) .
		
		eq notreg(B, s(Q)) = reg(insert(s(Q), not(act(B,s(Q))),
		     		            mreg(notreg(B,Q)))) .


	*** notzero
    *** Flag modification in a not operation.
    	*** Signature
    	
    	op notzero : Register Nat -> Bit .
    	
    	*** Equations
    	
    	eq notzero(B, 0) = not(act(B, 0)) .
    	
    	eq notzero(B, s(Q)) = not(act(B, s(Q))) and notzero(B, Q) .

	*** notpar 
	*** Flag modification in an not operation
		*** Signature
		
	   	op notpar : Register Nat -> Bit .
	   	
		*** Equations
		
		eq notpar(B, 0) = act(B, 0) .
		
		eq notpar(B, s(Q)) = notpar(B, Q) xor act(B, s(Q)) . 
	
	*** notneg 
	*** Flag modification in an not operation
		*** Signature
		
	   	op notneg : Register Nat -> Bit .
	   	
		*** Equations
		
		eq notneg(B,Q) = act(notreg(B,Q),Q) .
 
	*** XOR OPERATION **********************************************************
	
	*** xorreg 
 	*** xor between registers. 
		*** Signature
		
  		op xorreg : Register Register Nat -> Register .
		
		*** Equations
		
		eq xorreg(A,B,0) = reg(insert(0,
									  act(A,0) xor act(B,0),
									  empty)) .
		
		eq xorreg(A,B,s(Q))= reg(insert(s(Q), 
										act(A,s(Q)) xor act(B,s(Q)), 
								 		mreg(xorreg(A,B,Q)))) .
	

	
	*** xorzero 
	*** Flag modification in a xor operation
		*** Signature
		
		op xorzero : Register Register Nat -> Bit .
		
		*** Equations
		
		eq xorzero(A,B,0) = not(act(A,0) xor act(B,0)) .
		
		eq xorzero(A,B,s(Q))= xorzero(A,B,Q) and 
		                      not(act(A,s(Q)) xor 
							  act(B,s(Q))) .
						
		
	*** xorpar 
	*** Flag modification in a xor operation
		*** Signature
		
	   	op xorpar : Register Register Nat -> Bit .
	   	
		*** Equations
		
	    eq xorpar(A,B,0) = not(act(A,0) xor act(B,0)) .
	    
	    eq xorpar(A,B,s(Q)) = xorpar(A,B,Q) xor 
	    					  not(act(A,s(Q)) xor 
	    					      act(B,s(Q))) .   
	    
	*** xorneg
	*** Flag modification in an xor operation.
		*** Signature
		
		op xorneg : Register Register Nat -> Bit . 
		
		*** Equations
		
		eq xorneg(A,B,Q) = act(xorreg(A,B,Q),Q) .
		
    *** ID OPERATION **********************************************************
    
    *** idreg
	*** Projects a register.
		*** Signature
		
		op idreg : Register -> Register .
	
		*** Equations
	
		eq idreg(B) = B .
    
    *** idzero
    *** Flag modification in a projection operation.
    	*** Signature
    	
    	op idzero : Register Nat -> Bit .
    	
    	*** Equations
    	
    	eq idzero(B,0) = not(act(B,0)) .
    	
    	eq idzero(B,s(Q)) = idzero(B,Q) and 
    						not(act(B,s(Q))) .
		

	*** idpar 
	*** Flag modification in a projection operation
		*** Signature
		
	   	op idpar : Register Nat -> Bit .
	   	
		*** Equations
		
		eq idpar(B,0)= not(act(B,0)) .
		
		eq idpar(B,s(Q)) = idpar(B,Q) xor 
						   not(act(B,s(Q))) .

	*** idneg
	*** Flag modification in a projection operation.
		*** Signature
		
		op idneg : Register Nat -> Bit .
		 
		*** Equations
		
		eq idneg(B, Q) = act(idreg(B),Q) .
		
	*** SHL OPERATION **********************************************************
	
	*** shlreg 
 	*** Shifts one bit to the left of B 
		*** Signature
		
  		op shlreg : Register Nat Nat -> Register .
  		
		*** Equations
		
		eq shlreg(B, tam, 0) = reg(insert(0, 0,
							 	   empty)) .
		
		eq shlreg(B, tam, s(Q)) = reg(insert(s(Q), act(B, Q),
								       mreg(shlreg(B, tam, Q)))) . 


	*** shlzero 
	*** Flag modification in a shl operation
		*** Signature
		
		op shlzero : Register Nat Nat -> Bit .
		
		*** Equations
  	    
	    eq shlzero(B, tam, 0) = 1 .
	    
	    eq shlzero(B, tam, s(0)) = not(act(B,0) or act(B,s(0))) .
	    
	    ceq shlzero(B, tam, s(Q)) = shlzero(B, tam, Q) if s(Q) == tam .
	    
	    ceq shlzero(B, tam, s(Q)) = shlzero(B, tam, Q) and not(act(B, s(Q)))
	    							if s(Q) < tam .
	    	    
	*** shlpar 
	*** Parity flag modification in a shl operation
		*** Signature
		
	   	op shlpar : Register Nat Nat -> Bit .
	   	
		*** Equations
		
	    eq shlpar(B, tam, 0) = 1 .
	    
	    eq shlpar(B, tam, s(0)) = not(act(B,0)) xor 
	    						  (not(act(B,s(0))) xor 
	    						  shlpar(B, tam, 0)) .  
	    
	    ceq shlpar(B, tam, s(Q)) = shlpar(B, tam, Q) if s(Q) == tam .
	    
	    ceq shlpar(B, tam, s(Q)) = shlpar(B, tam, Q) xor not(act(B,s(Q))) 
	         				       if s(Q) < tam .
	    	
	    
	    

	*** shlneg
	*** Flag modification in an shl operation.
		*** Signature

		op shlneg : Register Nat -> Bit . 

		*** Equations

		eq shlneg(B,Q) = act((shlreg(B, Q, Q)), Q) .  
		
	
	*** ADD OPERATION **********************************************************
	
	*** addreg
	*** Adds two registers
		*** Signature
		
		op addreg : Register Register Nat -> Register .
		
		*** Equations
		
		eq addreg(A, B, 0) = reg(insert(0, act(A,0) xor act(B,0), empty)) .
		
		eq addreg(A, B, s(Q)) = reg(insert(s(Q), (act(A,s(Q)) xor act(B,s(Q))) 
												  xor addcar(A, B, Q),
									mreg(addreg(A,B,Q)))) .  
								
	*** addcar
	*** Gets the carry from the add of two registers
		*** Signature

		op addcar : Register Register Nat -> Bit .
		
		*** Equations

		eq addcar(A, B, 0) = act(A, 0) and act(B, 0) .
		
		ceq addcar(A, B, s(Q)) = act(A, s(Q)) and 
							   act(B, s(Q)) if addcar(A,B,Q) == 0 .					   
		ceq addcar(A, B, s(Q)) = act(A,s(Q)) or  
							   act(B,s(Q)) if addcar(A,B,Q) == 1 .
	
	*** addzero
	*** Tests for a zero result
		*** Signature
		
		op addzero : Register Register Nat -> Bit .
		
		*** Equations
		
		eq addzero(A,B,0) = not(act(A,0) xor act(B,0)) .							  
		
		eq addzero(A,B,s(Q))= addzero(A,B,Q) and 
		                      not((addcar(A,B,Q) xor act(A,s(Q))) 
		                      	   xor act(B,s(Q))) . 

	
	
	
	*** addpar
	*** Gives the parity of an addition over two registers
		*** Signature
		
		op addpar : Register Register Nat -> Bit .
		
		*** Equations
		
		eq addpar(A,B,0) = not(act(A,0) xor act(B,0)) .
		
		eq addpar(A,B,s(Q)) = addpar(A,B,Q) xor 
							  (act(A,s(Q)) xor 
							  (act(B,s(Q)) xor 
							  addcar(A,B,Q))) .  
	
	*** addneg
	*** Tests if the result of an addition equals to 0
		*** Signature
		
		op addneg : Register Register Nat -> Bit .
		
		*** Equations
		
		eq addneg(A,B,Q) = act(addreg(A,B,Q), Q) . 

	
	*** ONE REGISTER ***********************************************************
	
	*** onereg
	*** Constant register: lsb bit = 1
		*** Signature
		
		op onereg : Nat -> Register .
		
		*** Equations
		
		eq onereg(0) = reg(insert(0,
								  1,
								  empty)) .
		
		eq onereg(s(Q)) = reg(insert(s(Q),
									 0,
									 mreg(onereg(Q)))) .
		
	*** COMP OPERATION *********************************************************
	
	*** compreg
	*** The complement of a register
		*** Signature
		
		op compreg : Register  Nat -> Register .
		
		*** Equations
				
		eq compreg(B,Q) = addreg(notreg(B,Q),onereg(Q),Q) .

		
	*** compcar
	*** The carry of a complement
		*** Signature
		
			op compcar : Register Nat -> Bit .
		
		*** Equations
		
			eq compcar(B,Q) = addcar(onereg(Q),notreg(B,Q),Q) .
			
	*** compzero
	*** Tests for a zero on the complement
		*** Signature
		
			op compzero : Register Nat -> Bit .
		*** Equations
		
			eq compzero(A,Q) = addzero(notreg(A,Q),onereg(Q),Q ) .
			
	*** comppar
	*** The parity of a complement
		*** Signature
		
			op comppar : Register Nat -> Bit .
			
		*** Equations
		
			eq comppar(A,Q) = addpar(notreg(A,Q),onereg(Q),Q) .  
			
	*** compneg
	***	Tests for negive result
		*** Signature
		
			op compneg : Register Nat -> Bit .
			
		*** Equations
		
			eq compneg(B,Q) = addneg(notreg(B,Q),onereg(Q),Q) . 
	
	*** INC OPERATION **********************************************************
	
	*** increg
	*** The increment of a register by one
		*** Signature
		
		op increg : Register  Nat -> Register .
		
		*** Equations
				
		eq increg(A,Q) = addreg(A,onereg(Q),Q) .

		
	*** inccar
	*** The carry of a complement
		*** Signature
		
			op inccar : Register Nat -> Bit .
		
		*** Equations
		
			eq inccar(B,Q) = addcar(onereg(Q),B,Q) .
			
	*** inczero
	*** Tests for a zero on the increment
		*** Signature
		
			op inczero : Register Nat -> Bit .
		
		*** Equations
		
			eq inczero(A,Q) = addzero(A, onereg(Q), Q) .
			
	*** incpar
	*** The parity of an increment
		*** Signature
		
			op incpar : Register Nat -> Bit .
		
		*** Equations
		
			eq incpar(A,Q) = addpar(A,onereg(Q),Q) .  
			
	*** incneg
	***	Tests for negive result
		*** Signature
		
			op incneg : Register Nat -> Bit .
		
		*** Equations
		
			eq incneg(B,Q) = addneg(B,onereg(Q),Q) . 	
		
  
  
  
  
  
  	*** SHR OPERATION **********************************************************
  	
  	*** shrreg 
 	*** Shifts one bit to the right of B 
		*** Signature
		
  		op shrreg : Register Nat Nat -> Register .
		
		*** Equations
		
		eq shrreg(B,tam,0) = reg(insert(0,act(B,s(0)),empty)) .
		
		ceq shrreg(B,tam,s(Q)) = reg(insert(s(Q),0,mreg(shrreg(B,tam,Q)))) 
								 if s(Q) == tam .
		
		ceq shrreg(B,tam,s(Q)) = reg(insert(s(Q),act(B,s(s(Q))),
		                             mreg(shrreg(B,tam,Q)))) 
		                         if s(Q) < tam .

	*** shrzero 
 	*** Activates the zero flag on right shift operation 
		*** Signature
		
  		op shrzero : Register Nat -> Bit .
		
		*** Equations
		
		eq shrzero(B, s(0)) = not(act(B, s(0))) .
		
		eq shrzero(B,s(Q)) = not(act(B,s(Q))) and shrzero(B,Q) .	

	*** shrpar
	*** Activates the parity flag on right shift operation
		*** Signature
		
		op shrpar : Register Nat -> Bit .
		
		*** Equations
		
		eq shrpar(B, 0) = not(act(B, 0)) .
		
		eq shrpar(B, 1) = not(act(B, 1)) .
		
		eq shrpar(B, s(Q)) = act(B, s(Q)) xor shrpar(B, Q) .
		
	*** shrneg
	*** Deactivates the negative flag on shift right operation
		*** Signature
		
		op shrneg : Register -> Bit .
		
		*** Equations
		
		eq shrneg(B) = 0 .
		
			*** STRING MANIPULATION
	
	*** Declarations
	
		var S : String .
	
	*** strToReg
		*** Signature
		
		op strToReg : String Nat -> Register .
		
		*** Equations
		
		eq strToReg(S, 0) =	reg(insert(0, strToBit(S), empty) ) .
		
		eq strToReg(S, s(Q)) = reg(insert(s(Q), strToBit(substr(S,0,1)),
									mreg(strToReg(substr(S,1,Q) ,Q)))) .
							 
		


		
	*** regToStr
	
		op regToStr : Register Nat -> String .
		
		*** Equations
		
		eq regToStr(B, 0) = bitToStr(act(B,0)) .
		
		eq regToStr(B, s(Q)) = bitToStr(act(B,s(Q))) + regToStr(B,Q) .		 
		
	

endfm